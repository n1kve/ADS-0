. Базовые операции
Задача: Создать ArrayList, заполнить его числами от 1 до 10, затем удалить все четные числа.

java
ArrayList<Integer> numbers = new ArrayList<>();
for (int i = 1; i <= 10; i++) {
    numbers.add(i);
}
numbers.removeIf(num -> num % 2 == 0); // Лямбда для удаления четных
System.out.println(numbers); // [1, 3, 5, 7, 9]
2. Сравнение скорости добавления элементов
Задача: Сравнить время добавления 100_000 элементов в ArrayList и Vector.

java
long startTime = System.currentTimeMillis();
ArrayList<Integer> arrayList = new ArrayList<>();
for (int i = 0; i < 100_000; i++) {
    arrayList.add(i);
}
long arrayListTime = System.currentTimeMillis() - startTime;

startTime = System.currentTimeMillis();
Vector<Integer> vector = new Vector<>();
for (int i = 0; i < 100_000; i++) {
    vector.add(i);
}
long vectorTime = System.currentTimeMillis() - startTime;

System.out.println("ArrayList: " + arrayListTime + " ms");
System.out.println("Vector: " + vectorTime + " ms");
Вывод: ArrayList будет быстрее из-за отсутствия синхронизации.

3. Потокобезопасная работа с Vector
Задача: Два потока одновременно добавляют элементы в Vector.

java
Vector<String> vector = new Vector<>();

Runnable task = () -> {
    for (int i = 0; i < 1000; i++) {
        vector.add(Thread.currentThread().getName() + "-" + i);
    }
};

Thread thread1 = new Thread(task);
Thread thread2 = new Thread(task);

thread1.start();
thread2.start();

thread1.join();
thread2.join();

System.out.println("Размер Vector: " + vector.size()); // 2000
4. Копирование ArrayList в массив
Задача: Преобразовать ArrayList в массив.

java
ArrayList<String> list = new ArrayList<>(List.of("A", "B", "C"));
String[] array = list.toArray(new String[0]);
System.out.println(Arrays.toString(array)); // [A, B, C]
5. Поиск элемента в Vector
Задача: Проверить, содержит ли Vector строку "Java".

java
Vector<String> languages = new Vector<>(List.of("C++", "Python", "Java"));
boolean containsJava = languages.contains("Java");
System.out.println(containsJava); // true
6. Сортировка ArrayList
Задача: Отсортировать ArrayList строк в обратном порядке.

java
ArrayList<String> words = new ArrayList<>(List.of("Banana", "Apple", "Cherry"));
words.sort(Collections.reverseOrder());
System.out.println(words); // [Cherry, Banana, Apple]
7. Удаление дубликатов из ArrayList
Задача: Удалить повторяющиеся элементы через Stream API.

java
ArrayList<Integer> nums = new ArrayList<>(List.of(1, 2, 2, 3, 3, 3));
List<Integer> unique = nums.stream().distinct().toList();
System.out.println(unique); // [1, 2, 3]
8. Замена Vector на синхронизированный ArrayList
Задача: Создать потокобезопасный аналог Vector на основе ArrayList.

java
List<String> syncList = Collections.synchronizedList(new ArrayList<>());

// Поток 1
new Thread(() -> {
    syncList.add("A");
}).start();

// Поток 2
new Thread(() -> {
    syncList.add("B");
}).start();

Thread.sleep(100); // Даем потокам завершиться
System.out.println(syncList); // [A, B] (порядок может варьироваться)
9. Вставка элемента в середину ArrayList
Задача: Вставить строку "Mid" в середину списка.

java
ArrayList<String> list = new ArrayList<>(List.of("Start", "End"));
int middle = list.size() / 2;
list.add(middle, "Mid");
System.out.println(list); // [Start, Mid, End]
10. Очистка коллекции
Задача: Удалить все элементы из Vector.

java
Vector<Integer> numbers = new Vector<>(List.of(1, 2, 3));
numbers.clear();
System.out.println(numbers.size()); // 0
Итоговые задания для самопроверки
