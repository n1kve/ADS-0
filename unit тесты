Методы проверки (assertions):
assertEquals(expected, actual) - проверяет равенство ожидаемого и фактического значений

assertNotEquals(unexpected, actual) - проверяет неравенство

assertTrue(condition) - проверяет, что условие истинно

assertFalse(condition) - проверяет, что условие ложно

assertNull(object) - проверяет, что объект null

assertNotNull(object) - проверяет, что объект не null

assertSame(expected, actual) - проверяет, что объекты ссылаются на один и тот же экземпляр

assertNotSame(unexpected, actual) - проверяет, что объекты ссылаются на разные экземпляры

assertArrayEquals(expectedArray, actualArray) - проверяет равенство массивов

assertThrows(exceptionClass, executable) - проверяет, что код выбрасывает ожидаемое исключение


Создать файл для тестов в папке test\java\org.example
В  файле pom.xml добавить секцию <dependency>
 
    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
ПРОСТЕЙШИЙ ПРИМЕР
package org.example;
public class Main {
    public int add(int a, int b) {
        return a+b;
    }

}

package org.example;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class Tests {
    Main calc = new Main();

    @Test
    public void testAdd() {
        int res = calc.add(5, 124);
        assertEquals(129, res);
    }
}



public class Calculator {
    public int add(int a, int b) {
        return a + b;
    }
    public int subtract(int a, int b) {
        return a - b;
    }
    public int multiply(int a, int b) {
        return a * b;
    }
    public int divide(int a, int b) {
        if (b == 0) {
            throw new IllegalArgumentException("Cannot divide by zero");
        }
        return a / b;
    }
}

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
public class CalculatorTest {
    @Test
    public void testAddition() {
        Calculator calculator = new Calculator();
        int result = calculator.add(3, 5);
        assertEquals(8, result);
    }
    @Test
    public void testSubtraction() {
        Calculator calculator = new Calculator();
        int result = calculator.subtract(10, 4);
        assertEquals(6, result);    }
    @Test
    public void testMultiplication() {
        Calculator calculator = new Calculator();
        int result = calculator.multiply(6, 3);
        assertEquals(18, result);
    }
    @Test
    public void testDivision() {
        Calculator calculator = new Calculator();
        int result = calculator.divide(10, 2);
        assertEquals(5, result);    }
    @Test
    public void testDivisionByZero() {
        Calculator calculator = new Calculator();
        assertThrows(IllegalArgumentException.class, () -> {  calculator.divide(10, 0);
        });
    }
} 

МОЯ КУРСОВАЯ

package org.example;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class GameUnitTests {
    private Game game;

    @BeforeEach
    void setUp() {
        game = new Game();
    }

   ... private void Razdacha() {
        for (int i = 0; i < 6; i++) {
            Card pc = Coloda.drawCard();
            if (pc != null) RukaIgroka.add(pc);
            Card ec = Coloda.drawCard();
            if (ec != null) RukaVraga.add(ec);
        }
    }...

    @Test
    void testRazdacha() {
        assertEquals(6, game.getRukaIgroka().size(),"После создания игры у игрока должно быть 6 карт");
        assertEquals(6, game.getRukaVraga().size(),"После создания игры у врага должно быть 6 карт");
    }

    ...public boolean AtakaIgroka(Card card) {
        if (!RukaIgroka.contains(card)) return false;
        RukaIgroka.remove(card);
        tableCards.add(card);
        tableCards.add(null);
        return true;
    }...

    @Test
    void testAtakaIgroka() {
        Card attackCard = game.getRukaIgroka().getFirst();
        assertTrue(game.AtakaIgroka(attackCard),"Атака игрока должна возвращать true при успехе");
        assertEquals(5, game.getRukaIgroka().size(),"После атаки в руке игрока должно быть на 1 карту меньше");
        assertEquals(2, game.getTableCards().size(),"После атаки на столе должно быть 2 карты (атакующая и null для защиты)");
        assertNull(game.getTableCards().get(1),"Вторая карта на столе после атаки должна быть null");
    }

    ...public boolean AtakaVraga() {
        if (RukaVraga.isEmpty()) return false;
        Card attackCard = VyborAttackCard(RukaVraga);
        if (attackCard == null) return false;
        RukaVraga.remove(attackCard);
        tableCards.add(attackCard);
        tableCards.add(null);
        return true;
    }...

    @Test
    void testAtakaVraga() {
        assertTrue(game.AtakaVraga(),"Атака компьютера должна возвращать true при успехе");
        assertEquals(5, game.getRukaVraga().size(),"После атаки в руке компьютера должно быть на 1 карту меньше");
        assertEquals(2, game.getTableCards().size(),"После атаки на столе должно быть 2 карты (атакующая и null для защиты)");
        assertNull(game.getTableCards().get(1),"Вторая карта на столе после атаки должна быть null");


Задание 1: Простой тест для калькулятора
Условие: Напишите тесты для класса Calculator, который имеет методы add (сложение) и subtract (вычитание).

java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class CalculatorTest {
    
    @Test
    void testAdd() {
        Calculator calculator = new Calculator();
        assertEquals(5, calculator.add(2, 3));
        assertEquals(0, calculator.add(-1, 1));
    }
    
    @Test
    void testSubtract() {
        Calculator calculator = new Calculator();
        assertEquals(1, calculator.subtract(3, 2));
        assertEquals(-3, calculator.subtract(0, 3));
    }
}

class Calculator {
    public int add(int a, int b) {
        return a + b;
    }
    
    public int subtract(int a, int b) {
        return a - b;
    }
}
Задание 2: Тестирование с использованием equals
Условие: Напишите тесты для класса Person, проверяющие корректность работы метода equals.

java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class PersonTest {
    
    @Test
    void testEquals() {
        Person person1 = new Person("John", 30);
        Person person2 = new Person("John", 30);
        Person person3 = new Person("Alice", 25);
        
        // Проверка equals с одинаковыми объектами
        assertEquals(person1, person2);
        
        // Проверка equals с разными объектами
        assertNotEquals(person1, person3);
        
        // Проверка на null
        assertNotEquals(person1, null);
    }
}

class Person {
    private String name;
    private int age;
    
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Person person = (Person) o;
        return age == person.age && name.equals(person.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(name, age);
    }
}
Задание 3: Тестирование исключений
Условие: Напишите тесты для метода, который выбрасывает исключение при определенных условиях.

java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class BankAccountTest {
    
    @Test
    void testWithdraw() {
        BankAccount account = new BankAccount(100);
        
        // Проверка нормального снятия
        account.withdraw(50);
        assertEquals(50, account.getBalance());
        
        // Проверка исключения при недостатке средств
        assertThrows(InsufficientFundsException.class, () -> account.withdraw(100));
    }
}

class BankAccount {
    private double balance;
    
    public BankAccount(double balance) {
        this.balance = balance;
    }
    
    public void withdraw(double amount) throws InsufficientFundsException {
        if (amount > balance) {
            throw new InsufficientFundsException();
        }
        balance -= amount;
    }
    
    public double getBalance() {
        return balance;
    }
}

class InsufficientFundsException extends Exception {
}
Задание 4: Тестирование коллекций
Условие: Напишите тесты для метода, который возвращает список.

java
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

class StringUtilsTest {
    
    @Test
    void testSplitString() {
        StringUtils utils = new StringUtils();
        
        List<String> expected = Arrays.asList("Hello", "World");
        List<String> actual = utils.splitString("Hello World");
        
        // Проверка содержимого списка
        assertEquals(expected, actual);
        
        // Проверка размера списка
        assertEquals(2, actual.size());
    }
}

class StringUtils {
    public List<String> splitString(String input) {
        return Arrays.asList(input.split(" "));
    }
